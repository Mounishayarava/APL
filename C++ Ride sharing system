#include <iostream>
#include <vector>
#include <string>
using namespace std;
// Base class Ride
class Ride {
protected:
    int rideID;
    string pickupLocation;
    string dropoffLocation;
    double distance;
public:
    Ride(int id, string pickup, string dropoff, double dist)
        : rideID(id), pickupLocation(pickup), dropoffLocation(dropoff), distance(dist) {}
    virtual double fare() {
        return distance * 1.0; // Base fare per mile
    }

    virtual string rideDetails() {
        return "Ride ID: " + to_string(rideID) + ", Pickup: " + pickupLocation + ", Dropoff: " + dropoffLocation + ", Distance: " + to_string(distance) + " km, Fare: " + to_string(fare());
    }
};
// Derived class StandardRide
class StandardRide : public Ride {
public:
    StandardRide(int id, string pickup, string dropoff, double dist)
        : Ride(id, pickup, dropoff, dist) {}
    double fare() override {
        return distance * 1.0; // Standard ride fare
    }
};
// Derived class PremiumRide
class PremiumRide : public Ride {
public:
    PremiumRide(int id, string pickup, string dropoff, double dist)
        : Ride(id, pickup, dropoff, dist) {}
    double fare() override {
        return distance * 1.5; // Premium ride fare, higher rate
    }
};
// Driver class
class Driver {
private:
    int driverID;
    string name;
    double rating;
    vector<Ride*> assignedRides;
public:
    Driver(int id, string n, double r) : driverID(id), name(n), rating(r) {}
    void addRide(Ride* ride) {
        assignedRides.push_back(ride);
    }
    void getDriverInfo() {
        cout << "Driver ID: " << driverID << ", Name: " << name << ", Rating: " << rating << endl;
    }
};
// Rider class
class Rider {
private:
    int riderID;
    string name;
    vector<Ride*> requestedRides;
public:
    Rider(int id, string n) : riderID(id), name(n) {}
    void requestRide(Ride* ride) {
        requestedRides.push_back(ride);
    }
   void viewRides() {
        for (auto ride : requestedRides) {
            cout << ride->rideDetails() << endl;
        }
    }
};

// Main function to demonstrate polymorphism
int main() {
    Ride* ride1 = new StandardRide(101, "Downtown", "Airport", 10);
    Ride* ride2 = new PremiumRide(102, "Mall", "Hotel", 5);
    Driver driver(1, "Alice", 4.5);
    driver.addRide(ride1);
    driver.addRide(ride2);
    Rider rider(2, "Bob");
    rider.requestRide(ride1);
    rider.requestRide(ride2);
    driver.getDriverInfo();
    cout << "Rider Requested Rides: " << endl;
    rider.viewRides();
    delete ride1;
    delete ride2;
    return 0;
}
